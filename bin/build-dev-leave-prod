#!/usr/bin/env bash

CURRENT_BUILD_TIME_MAX=20

###
# Helper functions
##
function info () {
	printf "\r  [ \033[00;34m..\033[0m ] %s\n" "$1"
}

function success() {
	printf "\r\033[2K  [ \033[00;32mOK\033[0m ] %s\n" "$1"
}

function warn() {
  printf "\r\033[2K  [\033[0;31mWARN\033[0m] %s\n" "$1"
}

function sub_warn() {
  printf "\r\033[2K  [\033[0;31mWARN\033[0m] \t%s\n" "$1"
}

function stash_pop() {
	# Puts back the stuff that wasn't committed
	info "Git stashing: Putting back temporarily stashed files"
	git stash pop -q
}

function stash_push() {
    info "Git stashing: Stashing non-committed files temporarily"
    if git stash save -u -q; then
        success "Git stashing: All non-committed files have been temporarily stashed"
    else
        warn "Git stashing: An error occurred trying to stash non-relevant files, please check for any merge conflicts"
        exit 1
    fi
}

function cleanup() {
    # Starts the jekyll serve in the background since
    # `jekyll build`'s JEKYLL_ENV can't be overridden
    # For more details, see https://github.com/jekyll/jekyll/issues/6397

    # PID of the jekyll serve process is $1
    jekyll_pid=$1
    is_git_stashed=$2

    # Kill the process
    info "Cleanup: Killing the jekyll PID: $jekyll_pid"
    kill -INT $jekyll_pid
    success "Cleanup: Killed the jekyll PID: $jekyll_pid"

    # Unstash everything
    if [[ "$is_git_stashed" = true ]]; then
        info "Git stashing: Unstashing prior files to their original place"
        stash_pop
        success "Git stashing: Unstashed prior files to their original place"
    fi

    # Remove the build artifacts
    info "Build: Removing the old build from _site/*"
    if rm -rf _site/* ; then
        success "Build: Removed the old build from _site/*"
    else
        warn "Build: Failed to remove the old build from _site/*"
        exit 1
    fi

    echo "Debug: TODO remove this after"
    ps aux






    # Rebuild everything for production
    if jekyll build ; then
        success "Build: Jekyll build step was successful"
    else
        warn "Build: Jekyll build step failed"
        exit 1
    fi
}

# Some source used from the sample .pre-commit files by the golang team,
# at https://tip.golang.org/misc/git/pre-commit

# Generates the development static site
# We require this hack since we can't build
# with `JEKYLL_ENV=development jekyll build`
# since Jekyll is retarded.
info "Serve: Starting a Jekyll server in the background"
bundle exec jekyll serve &
jekyll_pid=$!
info "Serve: Jekyll server has started in the background on PID: $jekyll_pid"

# Sleeps for a bit while the site is building.
# NOTE: This value will need to be changed
# to be greater than the current required
# build time

info "Build: Sleeping for $CURRENT_BUILD_TIME_MAX seconds"
sleep $CURRENT_BUILD_TIME_MAX
success "Build: Done sleeping for $CURRENT_BUILD_TIME_MAX seconds"

# Runs through the test suite
if bin/test ; then
    success "Test: All tests passed correctly"
    cleanup $jekyll_pid $1
else
    warn "Test: Some tests failed to pass"
    cleanup $jekyll_pid $1
    exit 1
fi
